import datetime

def generate_parameter_cpp_code(settings, package_path):
    print("Generated Parameter Header", end="")
    header_file_name = f"{package_path}/include/mpc_planner_solver/mpc_planner_parameters.h"
    cpp_file_name = f"{package_path}/src/mpc_planner_parameters.cpp"

    header_file = open(header_file_name, "w")
    cpp_file = open(cpp_file_name, "w")

    header_file.write(
        "/** This file was autogenerated by the mpc_planner_solver package at "
        + datetime.datetime.now().strftime("%I:%M%p on %B %d, %Y")
        + "*/\n"
    )

    # IMPORTS
    header_file.write("#ifndef __MPC_PLANNER_PARAMETERS_H__\n")
    header_file.write("#define __MPC_PLANNER_PARAMETERS_H__\n\n")

    header_file.write("namespace MPCPlanner{\n\n")
    header_file.write("struct AcadosParameters;\n")
    cpp_file.write("#include <mpc_planner_solver/mpc_planner_parameters.h>\n\n")
    cpp_file.write("#include <mpc_planner_solver/acados_solver_interface.h>\n\n")
    param_name = "AcadosParameters"

    cpp_file.write("namespace MPCPlanner{\n\n")

    for key, indices in settings["params"].parameter_bundles.items():
        function_name = key.replace("_", " ").title().replace(" ", "")

        if len(indices) == 1:
            header_file.write(f"void setSolverParameter{function_name}(int k, {param_name}& params, const double value, int index=0);\n")
            cpp_file.write(f"void setSolverParameter{function_name}(int k, {param_name}& params, const double value, int index){{\n")
            cpp_file.write("\t(void)index;\n")
            cpp_file.write(f"\tparams.all_parameters[k * {settings['params'].length()} + {indices[0]}] = value;\n")
        else:
            header_file.write(f"void setSolverParameter{function_name}(int k, {param_name}& params, const double value, int index);\n")
            cpp_file.write(f"void setSolverParameter{function_name}(int k, {param_name}& params, const double value, int index){{\n")
            for i, index in enumerate(indices):
                if i == 0:
                    cpp_file.write(f"\tif(index == {i})\n")
                else:
                    cpp_file.write(f"\telse if(index == {i})\n")

                cpp_file.write(f"\t\tparams.all_parameters[k * {settings['params'].length()} + {index}] = value;\n")

        cpp_file.write("}\n")

    header_file.write("}\n#endif")
    cpp_file.write("}\n")

    print(" -> generated")
    return